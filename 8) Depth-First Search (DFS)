def depth_first_search(graph, start, goal):
    stack = [(start, [])]
    visited = set()
    
    while stack:
        node, path = stack.pop()
        if node == goal:
            return path + [node]
        if node in visited:
            continue
        visited.add(node)
        for neighbor in reversed(graph[node]):
            stack.append((neighbor, path + [node]))
    return None

graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}
print(depth_first_search(graph, 'A', 'F'))
